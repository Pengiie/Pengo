#pragma once
#include "../tokenizer/Token.h"
#include <vector>
#include <stack>
#include <queue>
#include <unordered_map>
#include <iostream>
#include <algorithm>
#define SET_NUM 101
#define GRAMMAR_NUM 65
enum class NodeType
{
	File,
	Arguments,
	Statements,
	ParamRecurse,
	FunctionDeclareStatement,
	Block,
	Statement,
	Parameters,
	ReturnStatement,
	VarDeclareStatement,
	Term,
	WhileStatement,
	IfStatement,
	ElseIfStatement,
	ElseStatement,
	Expression,
	Logical,
	LogicalOp,
	Conditional,
	Grouping,
	ConditionalOp,
	TermOp,
	Factor,
	FactorOp,
	Unary,
	UnaryOp,
	Call,
	ArgRecurse,
	Primary,
	Literal,
	Identifier,
};
struct Node
{
	NodeType type;
	bool terminal = false;
	Token token;
	std::vector<Node> children;
};
enum class ActionType
{
	None,
	Shift,
	Reduce,
	Accept
};
struct Action
{
	ActionType type = ActionType::None;
	int value = -1;
};
struct Production
{
	NodeType lhs;
	int rhs = 0;
	int rhsNodes = 0;
	bool terminates = false;
};
class Parser
{
public:
	Parser()
	{
		m_actionTable[8][TokenType::OrOr] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::AndAnd] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::Asterisk] = { ActionType::Shift, 46 };
		m_actionTable[8][TokenType::Slash] = { ActionType::Shift, 47 };
		m_actionTable[8][TokenType::Semicolon] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::LessThanEqual] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::LessThan] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::NotEqual] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::GreaterThanEqual] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::GreaterThan] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::EqualEqual] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::RightParen] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::Minus] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::Plus] = { ActionType::Reduce, 40 };
		m_actionTable[8][TokenType::Comma] = { ActionType::Reduce, 40 };
		m_actionTable[64][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[64][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[64][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[64][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[64][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[64][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[64][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[64][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[0][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[0][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[0][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[0][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[0][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[0][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[0][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[0][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[0][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[0][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[0][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[0][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[0][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[0][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[0][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[2][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[2][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[2][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[2][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[2][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[2][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[2][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[2][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[2][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[2][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[2][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[2][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[2][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[2][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[2][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[2][TokenType::_EOF] = { ActionType::Reduce, 1 };
		m_actionTable[67][TokenType::RightCurly] = { ActionType::Shift, 81 };
		m_actionTable[67][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[67][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[67][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[67][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[67][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[67][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[67][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[67][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[67][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[67][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[67][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[67][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[67][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[67][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[67][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[3][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[3][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[3][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[3][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[3][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[3][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[3][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[3][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[3][TokenType::Semicolon] = { ActionType::Reduce, 19 };
		m_actionTable[4][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[69][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[69][TokenType::RightParen] = { ActionType::Reduce, 15 };
		m_actionTable[5][TokenType::LeftParen] = { ActionType::Shift, 43 };
		m_actionTable[7][TokenType::Equal] = { ActionType::Shift, 44 };
		m_actionTable[7][TokenType::Semicolon] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::LessThanEqual] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::OrOr] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::AndAnd] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::LessThan] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::NotEqual] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::GreaterThanEqual] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::GreaterThan] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::EqualEqual] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::Minus] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::Plus] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::Slash] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::Asterisk] = { ActionType::Reduce, 57 };
		m_actionTable[7][TokenType::LeftParen] = { ActionType::Reduce, 57 };
		m_actionTable[73][TokenType::RightParen] = { ActionType::Shift, 85 };
		m_actionTable[9][TokenType::LeftParen] = { ActionType::Shift, 48 };
		m_actionTable[74][TokenType::RightParen] = { ActionType::Shift, 86 };
		m_actionTable[10][TokenType::LeftParen] = { ActionType::Shift, 49 };
		m_actionTable[75][TokenType::OrOr] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::AndAnd] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::Asterisk] = { ActionType::Shift, 46 };
		m_actionTable[75][TokenType::Slash] = { ActionType::Shift, 47 };
		m_actionTable[75][TokenType::Semicolon] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::LessThanEqual] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::RightParen] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::GreaterThanEqual] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::LessThan] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::GreaterThan] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::NotEqual] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::EqualEqual] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::Minus] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::Plus] = { ActionType::Reduce, 39 };
		m_actionTable[75][TokenType::Comma] = { ActionType::Reduce, 39 };
		m_actionTable[11][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[11][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[11][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[11][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[11][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[11][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[11][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[11][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[11][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[11][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[11][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[11][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[11][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[11][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[11][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[17][TokenType::Minus] = { ActionType::Shift, 51 };
		m_actionTable[17][TokenType::GreaterThanEqual] = { ActionType::Shift, 53 };
		m_actionTable[17][TokenType::LessThanEqual] = { ActionType::Shift, 60 };
		m_actionTable[17][TokenType::Plus] = { ActionType::Shift, 55 };
		m_actionTable[17][TokenType::EqualEqual] = { ActionType::Shift, 56 };
		m_actionTable[17][TokenType::LessThan] = { ActionType::Shift, 59 };
		m_actionTable[17][TokenType::NotEqual] = { ActionType::Shift, 57 };
		m_actionTable[17][TokenType::GreaterThan] = { ActionType::Shift, 58 };
		m_actionTable[17][TokenType::Comma] = { ActionType::Reduce, 32 };
		m_actionTable[17][TokenType::RightParen] = { ActionType::Reduce, 32 };
		m_actionTable[17][TokenType::Semicolon] = { ActionType::Reduce, 32 };
		m_actionTable[17][TokenType::OrOr] = { ActionType::Reduce, 32 };
		m_actionTable[17][TokenType::AndAnd] = { ActionType::Reduce, 32 };
		m_actionTable[82][TokenType::RightParen] = { ActionType::Shift, 90 };
		m_actionTable[18][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[18][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[18][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[18][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[18][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[18][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[18][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[18][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[86][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[86][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[86][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[86][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[86][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[86][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[86][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[86][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[86][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[86][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[86][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[86][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[86][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[86][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[86][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[22][TokenType::LeftParen] = { ActionType::Shift, 62 };
		m_actionTable[22][TokenType::Semicolon] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::LessThanEqual] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::OrOr] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::AndAnd] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::LessThan] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::NotEqual] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::GreaterThanEqual] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::GreaterThan] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::EqualEqual] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::RightParen] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::Minus] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::Plus] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::Comma] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::Slash] = { ActionType::Reduce, 52 };
		m_actionTable[22][TokenType::Asterisk] = { ActionType::Reduce, 52 };
		m_actionTable[24][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[24][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[24][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[24][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[24][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[24][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[24][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[24][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[92][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[28][TokenType::AndAnd] = { ActionType::Shift, 66 };
		m_actionTable[28][TokenType::OrOr] = { ActionType::Shift, 65 };
		m_actionTable[28][TokenType::Comma] = { ActionType::Reduce, 26 };
		m_actionTable[28][TokenType::RightParen] = { ActionType::Reduce, 26 };
		m_actionTable[28][TokenType::Semicolon] = { ActionType::Reduce, 26 };
		m_actionTable[96][TokenType::Comma] = { ActionType::Shift, 89 };
		m_actionTable[96][TokenType::RightParen] = { ActionType::Reduce, 55 };
		m_actionTable[32][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[32][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[32][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[32][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[32][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[32][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[32][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[32][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[32][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[32][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[32][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[32][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[32][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[32][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[32][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[33][TokenType::Semicolon] = { ActionType::Shift, 68 };
		m_actionTable[42][TokenType::LeftParen] = { ActionType::Shift, 69 };
		m_actionTable[43][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[43][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[43][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[43][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[43][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[43][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[43][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[43][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[44][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[44][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[44][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[44][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[44][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[44][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[44][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[44][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[45][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[45][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[45][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[45][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[45][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[45][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[45][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[45][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[48][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[48][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[48][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[48][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[48][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[48][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[48][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[48][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[49][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[49][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[49][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[49][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[49][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[49][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[49][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[49][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[52][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[52][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[52][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[52][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[52][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[52][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[52][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[52][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[54][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[54][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[54][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[54][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[54][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[54][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[54][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[54][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[61][TokenType::RightParen] = { ActionType::Shift, 77 };
		m_actionTable[62][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[62][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[62][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[62][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[62][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[62][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[62][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[62][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[62][TokenType::RightParen] = { ActionType::Reduce, 53 };
		m_actionTable[6][TokenType::Comma] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::LessThan] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Semicolon] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::LessThanEqual] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::OrOr] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::AndAnd] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::GreaterThanEqual] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::GreaterThan] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::NotEqual] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::EqualEqual] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::RightParen] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Slash] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Asterisk] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::LeftParen] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Minus] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Plus] = { ActionType::Reduce, 64 };
		m_actionTable[6][TokenType::Equal] = { ActionType::Reduce, 64 };
		m_actionTable[70][TokenType::RightParen] = { ActionType::Shift, 84 };
		m_actionTable[12][TokenType::Semicolon] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::LessThanEqual] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::OrOr] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::AndAnd] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::LessThan] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::NotEqual] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::GreaterThanEqual] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::GreaterThan] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::EqualEqual] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::RightParen] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::Minus] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::Plus] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::Comma] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::Slash] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::Asterisk] = { ActionType::Reduce, 61 };
		m_actionTable[12][TokenType::LeftParen] = { ActionType::Reduce, 61 };
		m_actionTable[76][TokenType::Minus] = { ActionType::Shift, 51 };
		m_actionTable[76][TokenType::Semicolon] = { ActionType::Reduce, 31 };
		m_actionTable[76][TokenType::Plus] = { ActionType::Shift, 55 };
		m_actionTable[76][TokenType::Comma] = { ActionType::Reduce, 31 };
		m_actionTable[76][TokenType::RightParen] = { ActionType::Reduce, 31 };
		m_actionTable[76][TokenType::AndAnd] = { ActionType::Reduce, 31 };
		m_actionTable[76][TokenType::OrOr] = { ActionType::Reduce, 31 };
		m_actionTable[14][TokenType::Semicolon] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::LessThanEqual] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::OrOr] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::AndAnd] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::LessThan] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::NotEqual] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::GreaterThanEqual] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::GreaterThan] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::EqualEqual] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::RightParen] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::Minus] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::Plus] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::Comma] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::Slash] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::Asterisk] = { ActionType::Reduce, 63 };
		m_actionTable[14][TokenType::LeftParen] = { ActionType::Reduce, 63 };
		m_actionTable[78][TokenType::RightParen] = { ActionType::Shift, 87 };
		m_actionTable[15][TokenType::Semicolon] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::LessThanEqual] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::OrOr] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::AndAnd] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::LessThan] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::NotEqual] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::GreaterThanEqual] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::GreaterThan] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::EqualEqual] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::RightParen] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::Minus] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::Plus] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::Comma] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::Slash] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::Asterisk] = { ActionType::Reduce, 65 };
		m_actionTable[15][TokenType::LeftParen] = { ActionType::Reduce, 65 };
		m_actionTable[79][TokenType::Comma] = { ActionType::Shift, 89 };
		m_actionTable[79][TokenType::RightParen] = { ActionType::Reduce, 55 };
		m_actionTable[19][TokenType::Integer] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::Float] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::Bool] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::Minus] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::String] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::LeftParen] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::Identifier] = { ActionType::Reduce, 50 };
		m_actionTable[19][TokenType::Bang] = { ActionType::Reduce, 50 };
		m_actionTable[83][TokenType::Comma] = { ActionType::Shift, 92 };
		m_actionTable[83][TokenType::RightParen] = { ActionType::Reduce, 17 };
		m_actionTable[20][TokenType::Semicolon] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::LessThanEqual] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::OrOr] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::AndAnd] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::LessThan] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::NotEqual] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::GreaterThanEqual] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::GreaterThan] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::EqualEqual] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::RightParen] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::Minus] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::Plus] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::Comma] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::Slash] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::Asterisk] = { ActionType::Reduce, 58 };
		m_actionTable[20][TokenType::LeftParen] = { ActionType::Reduce, 58 };
		m_actionTable[84][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[84][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[84][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[84][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[84][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[84][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[84][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[84][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[84][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[84][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[84][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[84][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[84][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[84][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[84][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[21][TokenType::Semicolon] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::LessThanEqual] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::OrOr] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::AndAnd] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::LessThan] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::NotEqual] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::GreaterThanEqual] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::GreaterThan] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::EqualEqual] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::RightParen] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::Minus] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::Plus] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::Comma] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::Slash] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::Asterisk] = { ActionType::Reduce, 59 };
		m_actionTable[21][TokenType::LeftParen] = { ActionType::Reduce, 59 };
		m_actionTable[85][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[85][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[85][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[85][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[85][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[85][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[85][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[85][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[85][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[85][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[85][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[85][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[85][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[85][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[85][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[25][TokenType::Semicolon] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::LessThanEqual] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::OrOr] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::AndAnd] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::LessThan] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::NotEqual] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::GreaterThanEqual] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::GreaterThan] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::EqualEqual] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::RightParen] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::Minus] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::Plus] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::Comma] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::Slash] = { ActionType::Reduce, 48 };
		m_actionTable[25][TokenType::Asterisk] = { ActionType::Reduce, 48 };
		m_actionTable[89][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[89][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[89][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[89][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[89][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[89][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[89][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[89][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[26][TokenType::Semicolon] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::LessThanEqual] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::OrOr] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::AndAnd] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::LessThan] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::NotEqual] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::GreaterThanEqual] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::GreaterThan] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::EqualEqual] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::RightParen] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::Minus] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::Plus] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::Comma] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::Slash] = { ActionType::Reduce, 44 };
		m_actionTable[26][TokenType::Asterisk] = { ActionType::Reduce, 44 };
		m_actionTable[90][TokenType::Func] = { ActionType::Shift, 4 };
		m_actionTable[90][TokenType::ElseIf] = { ActionType::Shift, 5 };
		m_actionTable[90][TokenType::Return] = { ActionType::Shift, 3 };
		m_actionTable[90][TokenType::While] = { ActionType::Shift, 10 };
		m_actionTable[90][TokenType::If] = { ActionType::Shift, 9 };
		m_actionTable[90][TokenType::Identifier] = { ActionType::Shift, 6 };
		m_actionTable[90][TokenType::Else] = { ActionType::Shift, 11 };
		m_actionTable[90][TokenType::Integer] = { ActionType::Shift, 12 };
		m_actionTable[90][TokenType::Float] = { ActionType::Shift, 13 };
		m_actionTable[90][TokenType::String] = { ActionType::Shift, 14 };
		m_actionTable[90][TokenType::Bool] = { ActionType::Shift, 15 };
		m_actionTable[90][TokenType::LeftParen] = { ActionType::Shift, 18 };
		m_actionTable[90][TokenType::Bang] = { ActionType::Shift, 19 };
		m_actionTable[90][TokenType::Minus] = { ActionType::Shift, 23 };
		m_actionTable[90][TokenType::LeftCurly] = { ActionType::Shift, 32 };
		m_actionTable[98][TokenType::Comma] = { ActionType::Shift, 92 };
		m_actionTable[98][TokenType::RightParen] = { ActionType::Reduce, 17 };
		m_actionTable[1][TokenType::_EOF] = { ActionType::Accept }; ;
		m_actionTable[13][TokenType::Semicolon] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::LessThanEqual] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::OrOr] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::AndAnd] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::LessThan] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::NotEqual] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::GreaterThanEqual] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::GreaterThan] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::EqualEqual] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::RightParen] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::Minus] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::Plus] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::Comma] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::Slash] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::Asterisk] = { ActionType::Reduce, 62 };
		m_actionTable[13][TokenType::LeftParen] = { ActionType::Reduce, 62 };
		m_actionTable[16][TokenType::RightCurly] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Else] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::_EOF] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::ElseIf] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Func] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Return] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::While] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::If] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Identifier] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Bool] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::String] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Float] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Integer] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::LeftParen] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Bang] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::Minus] = { ActionType::Reduce, 9 };
		m_actionTable[16][TokenType::LeftCurly] = { ActionType::Reduce, 9 };
		m_actionTable[23][TokenType::Integer] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::Float] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::Bool] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::Minus] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::String] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::LeftParen] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::Identifier] = { ActionType::Reduce, 49 };
		m_actionTable[23][TokenType::Bang] = { ActionType::Reduce, 49 };
		m_actionTable[27][TokenType::Comma] = { ActionType::Reduce, 28 };
		m_actionTable[27][TokenType::RightParen] = { ActionType::Reduce, 28 };
		m_actionTable[27][TokenType::Semicolon] = { ActionType::Reduce, 28 };
		m_actionTable[27][TokenType::AndAnd] = { ActionType::Reduce, 28 };
		m_actionTable[27][TokenType::OrOr] = { ActionType::Reduce, 28 };
		m_actionTable[29][TokenType::Semicolon] = { ActionType::Reduce, 11 };
		m_actionTable[30][TokenType::Semicolon] = { ActionType::Reduce, 12 };
		m_actionTable[31][TokenType::Semicolon] = { ActionType::Reduce, 13 };
		m_actionTable[34][TokenType::RightCurly] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Else] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::_EOF] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::ElseIf] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Func] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Return] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::While] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::If] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Identifier] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Bool] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::String] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Float] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Integer] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::LeftParen] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Bang] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::Minus] = { ActionType::Reduce, 6 };
		m_actionTable[34][TokenType::LeftCurly] = { ActionType::Reduce, 6 };
		m_actionTable[35][TokenType::RightCurly] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Else] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::_EOF] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::ElseIf] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Func] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Return] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::While] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::If] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Identifier] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Bool] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::String] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Float] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Integer] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::LeftParen] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Bang] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::Minus] = { ActionType::Reduce, 7 };
		m_actionTable[35][TokenType::LeftCurly] = { ActionType::Reduce, 7 };
		m_actionTable[36][TokenType::RightCurly] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Else] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::_EOF] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::ElseIf] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Func] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Return] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::While] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::If] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Identifier] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Bool] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::String] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Float] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Integer] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::LeftParen] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Bang] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::Minus] = { ActionType::Reduce, 8 };
		m_actionTable[36][TokenType::LeftCurly] = { ActionType::Reduce, 8 };
		m_actionTable[37][TokenType::RightCurly] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Else] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::_EOF] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::ElseIf] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Func] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Return] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::While] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::If] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Identifier] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Bool] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::String] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Float] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Integer] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::LeftParen] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Bang] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::Minus] = { ActionType::Reduce, 10 };
		m_actionTable[37][TokenType::LeftCurly] = { ActionType::Reduce, 10 };
		m_actionTable[38][TokenType::RightCurly] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Else] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::_EOF] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::ElseIf] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Func] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Return] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::While] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::If] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Identifier] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Bool] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::String] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Float] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Integer] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::LeftParen] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Bang] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::Minus] = { ActionType::Reduce, 3 };
		m_actionTable[38][TokenType::LeftCurly] = { ActionType::Reduce, 3 };
		m_actionTable[39][TokenType::RightCurly] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Else] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::_EOF] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::ElseIf] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Func] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Return] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::While] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::If] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Identifier] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Bool] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::String] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Float] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Integer] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::LeftParen] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Bang] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::Minus] = { ActionType::Reduce, 2 };
		m_actionTable[39][TokenType::LeftCurly] = { ActionType::Reduce, 2 };
		m_actionTable[40][TokenType::Semicolon] = { ActionType::Reduce, 20 };
		m_actionTable[41][TokenType::Semicolon] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::LessThanEqual] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::OrOr] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::AndAnd] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::LessThan] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::NotEqual] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::GreaterThanEqual] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::GreaterThan] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::EqualEqual] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::RightParen] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::Minus] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::Plus] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::Comma] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::Slash] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::Asterisk] = { ActionType::Reduce, 57 };
		m_actionTable[41][TokenType::LeftParen] = { ActionType::Reduce, 57 };
		m_actionTable[46][TokenType::Integer] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::Float] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::Bool] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::Minus] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::String] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::LeftParen] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::Identifier] = { ActionType::Reduce, 45 };
		m_actionTable[46][TokenType::Bang] = { ActionType::Reduce, 45 };
		m_actionTable[47][TokenType::Integer] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::Float] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::Bool] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::Minus] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::String] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::LeftParen] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::Identifier] = { ActionType::Reduce, 46 };
		m_actionTable[47][TokenType::Bang] = { ActionType::Reduce, 46 };
		m_actionTable[50][TokenType::RightCurly] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Else] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::_EOF] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::ElseIf] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Func] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Return] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::While] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::If] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Identifier] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Bool] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::String] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Float] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Integer] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::LeftParen] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Bang] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::Minus] = { ActionType::Reduce, 25 };
		m_actionTable[50][TokenType::LeftCurly] = { ActionType::Reduce, 25 };
		m_actionTable[51][TokenType::Integer] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::Float] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::Bool] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::Minus] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::String] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::LeftParen] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::Identifier] = { ActionType::Reduce, 42 };
		m_actionTable[51][TokenType::Bang] = { ActionType::Reduce, 42 };
		m_actionTable[53][TokenType::Integer] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::Float] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::Bool] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::Minus] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::String] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::LeftParen] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::Identifier] = { ActionType::Reduce, 36 };
		m_actionTable[53][TokenType::Bang] = { ActionType::Reduce, 36 };
		m_actionTable[55][TokenType::Integer] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::Float] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::Bool] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::Minus] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::String] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::LeftParen] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::Identifier] = { ActionType::Reduce, 41 };
		m_actionTable[55][TokenType::Bang] = { ActionType::Reduce, 41 };
		m_actionTable[56][TokenType::Integer] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::Float] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::Bool] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::Minus] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::String] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::LeftParen] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::Identifier] = { ActionType::Reduce, 33 };
		m_actionTable[56][TokenType::Bang] = { ActionType::Reduce, 33 };
		m_actionTable[57][TokenType::Integer] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::Float] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::Bool] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::Minus] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::String] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::LeftParen] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::Identifier] = { ActionType::Reduce, 34 };
		m_actionTable[57][TokenType::Bang] = { ActionType::Reduce, 34 };
		m_actionTable[58][TokenType::Integer] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::Float] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::Bool] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::Minus] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::String] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::LeftParen] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::Identifier] = { ActionType::Reduce, 35 };
		m_actionTable[58][TokenType::Bang] = { ActionType::Reduce, 35 };
		m_actionTable[59][TokenType::Integer] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::Float] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::Bool] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::Minus] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::String] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::LeftParen] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::Identifier] = { ActionType::Reduce, 37 };
		m_actionTable[59][TokenType::Bang] = { ActionType::Reduce, 37 };
		m_actionTable[60][TokenType::Integer] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::Float] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::Bool] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::Minus] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::String] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::LeftParen] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::Identifier] = { ActionType::Reduce, 38 };
		m_actionTable[60][TokenType::Bang] = { ActionType::Reduce, 38 };
		m_actionTable[63][TokenType::Semicolon] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::LessThanEqual] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::OrOr] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::AndAnd] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::RightParen] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::GreaterThanEqual] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::LessThan] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::GreaterThan] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::NotEqual] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::EqualEqual] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::Minus] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::Plus] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::Comma] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::Slash] = { ActionType::Reduce, 47 };
		m_actionTable[63][TokenType::Asterisk] = { ActionType::Reduce, 47 };
		m_actionTable[65][TokenType::Integer] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::Float] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::Bool] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::Minus] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::String] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::LeftParen] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::Identifier] = { ActionType::Reduce, 30 };
		m_actionTable[65][TokenType::Bang] = { ActionType::Reduce, 30 };
		m_actionTable[66][TokenType::Integer] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::Float] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::Bool] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::Minus] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::String] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::LeftParen] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::Identifier] = { ActionType::Reduce, 29 };
		m_actionTable[66][TokenType::Bang] = { ActionType::Reduce, 29 };
		m_actionTable[68][TokenType::RightCurly] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Else] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::_EOF] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::ElseIf] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Func] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Return] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::While] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::If] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Identifier] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Bool] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::String] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Float] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Integer] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::LeftParen] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Bang] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::Minus] = { ActionType::Reduce, 5 };
		m_actionTable[68][TokenType::LeftCurly] = { ActionType::Reduce, 5 };
		m_actionTable[71][TokenType::Semicolon] = { ActionType::Reduce, 21 };
		m_actionTable[72][TokenType::Semicolon] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::LessThanEqual] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::OrOr] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::AndAnd] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::RightParen] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::GreaterThanEqual] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::LessThan] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::GreaterThan] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::NotEqual] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::EqualEqual] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::Minus] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::Plus] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::Comma] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::Slash] = { ActionType::Reduce, 43 };
		m_actionTable[72][TokenType::Asterisk] = { ActionType::Reduce, 43 };
		m_actionTable[77][TokenType::Semicolon] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::LessThanEqual] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::OrOr] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::AndAnd] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::LessThan] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::NotEqual] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::GreaterThanEqual] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::GreaterThan] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::EqualEqual] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::RightParen] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::Minus] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::Plus] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::Comma] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::Slash] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::Asterisk] = { ActionType::Reduce, 60 };
		m_actionTable[77][TokenType::LeftParen] = { ActionType::Reduce, 60 };
		m_actionTable[80][TokenType::Comma] = { ActionType::Reduce, 27 };
		m_actionTable[80][TokenType::RightParen] = { ActionType::Reduce, 27 };
		m_actionTable[80][TokenType::Semicolon] = { ActionType::Reduce, 27 };
		m_actionTable[80][TokenType::AndAnd] = { ActionType::Reduce, 27 };
		m_actionTable[80][TokenType::OrOr] = { ActionType::Reduce, 27 };
		m_actionTable[81][TokenType::RightCurly] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Else] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::_EOF] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::ElseIf] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Func] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Return] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::While] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::If] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Identifier] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Bool] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::String] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Float] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Integer] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::LeftParen] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Bang] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::Minus] = { ActionType::Reduce, 4 };
		m_actionTable[81][TokenType::LeftCurly] = { ActionType::Reduce, 4 };
		m_actionTable[87][TokenType::Semicolon] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::LessThanEqual] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::OrOr] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::AndAnd] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::RightParen] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::GreaterThanEqual] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::LessThan] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::GreaterThan] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::NotEqual] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::EqualEqual] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::Minus] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::Plus] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::Comma] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::Slash] = { ActionType::Reduce, 51 };
		m_actionTable[87][TokenType::Asterisk] = { ActionType::Reduce, 51 };
		m_actionTable[88][TokenType::RightParen] = { ActionType::Reduce, 54 };
		m_actionTable[91][TokenType::RightParen] = { ActionType::Reduce, 16 };
		m_actionTable[93][TokenType::RightCurly] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Else] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::_EOF] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::ElseIf] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Func] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Return] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::While] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::If] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Identifier] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Bool] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::String] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Float] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Integer] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::LeftParen] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Bang] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::Minus] = { ActionType::Reduce, 24 };
		m_actionTable[93][TokenType::LeftCurly] = { ActionType::Reduce, 24 };
		m_actionTable[94][TokenType::RightCurly] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Else] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::_EOF] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::ElseIf] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Func] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Return] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::While] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::If] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Identifier] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Bool] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::String] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Float] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Integer] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::LeftParen] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Bang] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::Minus] = { ActionType::Reduce, 23 };
		m_actionTable[94][TokenType::LeftCurly] = { ActionType::Reduce, 23 };
		m_actionTable[95][TokenType::RightCurly] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Else] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::_EOF] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::ElseIf] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Func] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Return] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::While] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::If] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Identifier] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Bool] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::String] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Float] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Integer] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::LeftParen] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Bang] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::Minus] = { ActionType::Reduce, 22 };
		m_actionTable[95][TokenType::LeftCurly] = { ActionType::Reduce, 22 };
		m_actionTable[97][TokenType::RightCurly] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Else] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::_EOF] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::ElseIf] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Func] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Return] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::While] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::If] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Identifier] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Bool] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::String] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Float] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Integer] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::LeftParen] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Bang] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::Minus] = { ActionType::Reduce, 14 };
		m_actionTable[97][TokenType::LeftCurly] = { ActionType::Reduce, 14 };
		m_actionTable[99][TokenType::RightParen] = { ActionType::Reduce, 56 };
		m_actionTable[100][TokenType::RightParen] = { ActionType::Reduce, 18 };
		m_gotoTable[8][NodeType::FactorOp] = 45;
		m_gotoTable[64][NodeType::Conditional] = 80;
		m_gotoTable[64][NodeType::UnaryOp] = 24;
		m_gotoTable[64][NodeType::Term] = 17;
		m_gotoTable[64][NodeType::Identifier] = 41;
		m_gotoTable[64][NodeType::Literal] = 21;
		m_gotoTable[64][NodeType::Grouping] = 20;
		m_gotoTable[64][NodeType::Call] = 25;
		m_gotoTable[64][NodeType::Primary] = 22;
		m_gotoTable[64][NodeType::Unary] = 26;
		m_gotoTable[64][NodeType::Factor] = 8;
		m_gotoTable[0][NodeType::File] = 1;
		m_gotoTable[0][NodeType::WhileStatement] = 16;
		m_gotoTable[0][NodeType::Term] = 17;
		m_gotoTable[0][NodeType::Statements] = 2;
		m_gotoTable[0][NodeType::Factor] = 8;
		m_gotoTable[0][NodeType::Identifier] = 7;
		m_gotoTable[0][NodeType::Literal] = 21;
		m_gotoTable[0][NodeType::Grouping] = 20;
		m_gotoTable[0][NodeType::Primary] = 22;
		m_gotoTable[0][NodeType::UnaryOp] = 24;
		m_gotoTable[0][NodeType::Call] = 25;
		m_gotoTable[0][NodeType::Unary] = 26;
		m_gotoTable[0][NodeType::Conditional] = 27;
		m_gotoTable[0][NodeType::Logical] = 28;
		m_gotoTable[0][NodeType::Expression] = 29;
		m_gotoTable[0][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[0][NodeType::ReturnStatement] = 31;
		m_gotoTable[0][NodeType::Statement] = 33;
		m_gotoTable[0][NodeType::IfStatement] = 34;
		m_gotoTable[0][NodeType::ElseIfStatement] = 35;
		m_gotoTable[0][NodeType::ElseStatement] = 36;
		m_gotoTable[0][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[0][NodeType::Block] = 38;
		m_gotoTable[18][NodeType::Expression] = 61;
		m_gotoTable[18][NodeType::UnaryOp] = 24;
		m_gotoTable[18][NodeType::Term] = 17;
		m_gotoTable[18][NodeType::Identifier] = 41;
		m_gotoTable[18][NodeType::Literal] = 21;
		m_gotoTable[18][NodeType::Grouping] = 20;
		m_gotoTable[18][NodeType::Call] = 25;
		m_gotoTable[18][NodeType::Primary] = 22;
		m_gotoTable[18][NodeType::Unary] = 26;
		m_gotoTable[18][NodeType::Factor] = 8;
		m_gotoTable[18][NodeType::Conditional] = 27;
		m_gotoTable[18][NodeType::Logical] = 28;
		m_gotoTable[2][NodeType::Block] = 39;
		m_gotoTable[2][NodeType::Factor] = 8;
		m_gotoTable[2][NodeType::Identifier] = 7;
		m_gotoTable[2][NodeType::WhileStatement] = 16;
		m_gotoTable[2][NodeType::Term] = 17;
		m_gotoTable[2][NodeType::Literal] = 21;
		m_gotoTable[2][NodeType::Grouping] = 20;
		m_gotoTable[2][NodeType::Primary] = 22;
		m_gotoTable[2][NodeType::UnaryOp] = 24;
		m_gotoTable[2][NodeType::Call] = 25;
		m_gotoTable[2][NodeType::Unary] = 26;
		m_gotoTable[2][NodeType::Conditional] = 27;
		m_gotoTable[2][NodeType::Logical] = 28;
		m_gotoTable[2][NodeType::Expression] = 29;
		m_gotoTable[2][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[2][NodeType::ReturnStatement] = 31;
		m_gotoTable[2][NodeType::Statement] = 33;
		m_gotoTable[2][NodeType::IfStatement] = 34;
		m_gotoTable[2][NodeType::ElseIfStatement] = 35;
		m_gotoTable[2][NodeType::ElseStatement] = 36;
		m_gotoTable[2][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[75][NodeType::FactorOp] = 45;
		m_gotoTable[11][NodeType::Block] = 50;
		m_gotoTable[11][NodeType::Factor] = 8;
		m_gotoTable[11][NodeType::Identifier] = 7;
		m_gotoTable[11][NodeType::WhileStatement] = 16;
		m_gotoTable[11][NodeType::Term] = 17;
		m_gotoTable[11][NodeType::Literal] = 21;
		m_gotoTable[11][NodeType::Grouping] = 20;
		m_gotoTable[11][NodeType::Primary] = 22;
		m_gotoTable[11][NodeType::UnaryOp] = 24;
		m_gotoTable[11][NodeType::Call] = 25;
		m_gotoTable[11][NodeType::Unary] = 26;
		m_gotoTable[11][NodeType::Conditional] = 27;
		m_gotoTable[11][NodeType::Logical] = 28;
		m_gotoTable[11][NodeType::Expression] = 29;
		m_gotoTable[11][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[11][NodeType::ReturnStatement] = 31;
		m_gotoTable[11][NodeType::Statement] = 33;
		m_gotoTable[11][NodeType::IfStatement] = 34;
		m_gotoTable[11][NodeType::ElseIfStatement] = 35;
		m_gotoTable[11][NodeType::ElseStatement] = 36;
		m_gotoTable[11][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[67][NodeType::Block] = 39;
		m_gotoTable[67][NodeType::Identifier] = 7;
		m_gotoTable[67][NodeType::Factor] = 8;
		m_gotoTable[67][NodeType::WhileStatement] = 16;
		m_gotoTable[67][NodeType::Term] = 17;
		m_gotoTable[67][NodeType::Literal] = 21;
		m_gotoTable[67][NodeType::Grouping] = 20;
		m_gotoTable[67][NodeType::Primary] = 22;
		m_gotoTable[67][NodeType::UnaryOp] = 24;
		m_gotoTable[67][NodeType::Call] = 25;
		m_gotoTable[67][NodeType::Unary] = 26;
		m_gotoTable[67][NodeType::Conditional] = 27;
		m_gotoTable[67][NodeType::Logical] = 28;
		m_gotoTable[67][NodeType::Expression] = 29;
		m_gotoTable[67][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[67][NodeType::ReturnStatement] = 31;
		m_gotoTable[67][NodeType::Statement] = 33;
		m_gotoTable[67][NodeType::IfStatement] = 34;
		m_gotoTable[67][NodeType::ElseIfStatement] = 35;
		m_gotoTable[67][NodeType::ElseStatement] = 36;
		m_gotoTable[67][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[3][NodeType::Expression] = 40;
		m_gotoTable[3][NodeType::UnaryOp] = 24;
		m_gotoTable[3][NodeType::Term] = 17;
		m_gotoTable[3][NodeType::Identifier] = 41;
		m_gotoTable[3][NodeType::Literal] = 21;
		m_gotoTable[3][NodeType::Grouping] = 20;
		m_gotoTable[3][NodeType::Call] = 25;
		m_gotoTable[3][NodeType::Primary] = 22;
		m_gotoTable[3][NodeType::Unary] = 26;
		m_gotoTable[3][NodeType::Factor] = 8;
		m_gotoTable[3][NodeType::Conditional] = 27;
		m_gotoTable[3][NodeType::Logical] = 28;
		m_gotoTable[4][NodeType::Identifier] = 42;
		m_gotoTable[17][NodeType::TermOp] = 52;
		m_gotoTable[17][NodeType::ConditionalOp] = 54;
		m_gotoTable[24][NodeType::Unary] = 63;
		m_gotoTable[24][NodeType::Identifier] = 41;
		m_gotoTable[24][NodeType::Literal] = 21;
		m_gotoTable[24][NodeType::Grouping] = 20;
		m_gotoTable[24][NodeType::Call] = 25;
		m_gotoTable[24][NodeType::Primary] = 22;
		m_gotoTable[24][NodeType::UnaryOp] = 24;
		m_gotoTable[92][NodeType::Identifier] = 98;
		m_gotoTable[28][NodeType::LogicalOp] = 64;
		m_gotoTable[96][NodeType::ArgRecurse] = 99;
		m_gotoTable[32][NodeType::WhileStatement] = 16;
		m_gotoTable[32][NodeType::Term] = 17;
		m_gotoTable[32][NodeType::Statements] = 67;
		m_gotoTable[32][NodeType::Factor] = 8;
		m_gotoTable[32][NodeType::Identifier] = 7;
		m_gotoTable[32][NodeType::Literal] = 21;
		m_gotoTable[32][NodeType::Grouping] = 20;
		m_gotoTable[32][NodeType::Primary] = 22;
		m_gotoTable[32][NodeType::UnaryOp] = 24;
		m_gotoTable[32][NodeType::Call] = 25;
		m_gotoTable[32][NodeType::Unary] = 26;
		m_gotoTable[32][NodeType::Conditional] = 27;
		m_gotoTable[32][NodeType::Logical] = 28;
		m_gotoTable[32][NodeType::Expression] = 29;
		m_gotoTable[32][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[32][NodeType::ReturnStatement] = 31;
		m_gotoTable[32][NodeType::Statement] = 33;
		m_gotoTable[32][NodeType::IfStatement] = 34;
		m_gotoTable[32][NodeType::ElseIfStatement] = 35;
		m_gotoTable[32][NodeType::ElseStatement] = 36;
		m_gotoTable[32][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[32][NodeType::Block] = 38;
		m_gotoTable[43][NodeType::Expression] = 70;
		m_gotoTable[43][NodeType::UnaryOp] = 24;
		m_gotoTable[43][NodeType::Term] = 17;
		m_gotoTable[43][NodeType::Identifier] = 41;
		m_gotoTable[43][NodeType::Literal] = 21;
		m_gotoTable[43][NodeType::Grouping] = 20;
		m_gotoTable[43][NodeType::Call] = 25;
		m_gotoTable[43][NodeType::Primary] = 22;
		m_gotoTable[43][NodeType::Unary] = 26;
		m_gotoTable[43][NodeType::Factor] = 8;
		m_gotoTable[43][NodeType::Conditional] = 27;
		m_gotoTable[43][NodeType::Logical] = 28;
		m_gotoTable[44][NodeType::Expression] = 71;
		m_gotoTable[44][NodeType::UnaryOp] = 24;
		m_gotoTable[44][NodeType::Term] = 17;
		m_gotoTable[44][NodeType::Identifier] = 41;
		m_gotoTable[44][NodeType::Literal] = 21;
		m_gotoTable[44][NodeType::Grouping] = 20;
		m_gotoTable[44][NodeType::Call] = 25;
		m_gotoTable[44][NodeType::Primary] = 22;
		m_gotoTable[44][NodeType::Unary] = 26;
		m_gotoTable[44][NodeType::Factor] = 8;
		m_gotoTable[44][NodeType::Conditional] = 27;
		m_gotoTable[44][NodeType::Logical] = 28;
		m_gotoTable[45][NodeType::Unary] = 72;
		m_gotoTable[45][NodeType::Identifier] = 41;
		m_gotoTable[45][NodeType::Literal] = 21;
		m_gotoTable[45][NodeType::Grouping] = 20;
		m_gotoTable[45][NodeType::Call] = 25;
		m_gotoTable[45][NodeType::Primary] = 22;
		m_gotoTable[45][NodeType::UnaryOp] = 24;
		m_gotoTable[48][NodeType::Expression] = 73;
		m_gotoTable[48][NodeType::UnaryOp] = 24;
		m_gotoTable[48][NodeType::Term] = 17;
		m_gotoTable[48][NodeType::Identifier] = 41;
		m_gotoTable[48][NodeType::Literal] = 21;
		m_gotoTable[48][NodeType::Grouping] = 20;
		m_gotoTable[48][NodeType::Call] = 25;
		m_gotoTable[48][NodeType::Primary] = 22;
		m_gotoTable[48][NodeType::Unary] = 26;
		m_gotoTable[48][NodeType::Factor] = 8;
		m_gotoTable[48][NodeType::Conditional] = 27;
		m_gotoTable[48][NodeType::Logical] = 28;
		m_gotoTable[49][NodeType::Expression] = 74;
		m_gotoTable[49][NodeType::UnaryOp] = 24;
		m_gotoTable[49][NodeType::Term] = 17;
		m_gotoTable[49][NodeType::Identifier] = 41;
		m_gotoTable[49][NodeType::Literal] = 21;
		m_gotoTable[49][NodeType::Grouping] = 20;
		m_gotoTable[49][NodeType::Call] = 25;
		m_gotoTable[49][NodeType::Primary] = 22;
		m_gotoTable[49][NodeType::Unary] = 26;
		m_gotoTable[49][NodeType::Factor] = 8;
		m_gotoTable[49][NodeType::Conditional] = 27;
		m_gotoTable[49][NodeType::Logical] = 28;
		m_gotoTable[52][NodeType::Factor] = 75;
		m_gotoTable[52][NodeType::Identifier] = 41;
		m_gotoTable[52][NodeType::Literal] = 21;
		m_gotoTable[52][NodeType::Grouping] = 20;
		m_gotoTable[52][NodeType::Call] = 25;
		m_gotoTable[52][NodeType::Primary] = 22;
		m_gotoTable[52][NodeType::UnaryOp] = 24;
		m_gotoTable[52][NodeType::Unary] = 26;
		m_gotoTable[54][NodeType::UnaryOp] = 24;
		m_gotoTable[54][NodeType::Term] = 76;
		m_gotoTable[54][NodeType::Identifier] = 41;
		m_gotoTable[54][NodeType::Literal] = 21;
		m_gotoTable[54][NodeType::Grouping] = 20;
		m_gotoTable[54][NodeType::Call] = 25;
		m_gotoTable[54][NodeType::Primary] = 22;
		m_gotoTable[54][NodeType::Unary] = 26;
		m_gotoTable[54][NodeType::Factor] = 8;
		m_gotoTable[62][NodeType::UnaryOp] = 24;
		m_gotoTable[62][NodeType::Arguments] = 78;
		m_gotoTable[62][NodeType::Term] = 17;
		m_gotoTable[62][NodeType::Identifier] = 41;
		m_gotoTable[62][NodeType::Literal] = 21;
		m_gotoTable[62][NodeType::Grouping] = 20;
		m_gotoTable[62][NodeType::Call] = 25;
		m_gotoTable[62][NodeType::Primary] = 22;
		m_gotoTable[62][NodeType::Unary] = 26;
		m_gotoTable[62][NodeType::Factor] = 8;
		m_gotoTable[62][NodeType::Conditional] = 27;
		m_gotoTable[62][NodeType::Logical] = 28;
		m_gotoTable[62][NodeType::Expression] = 79;
		m_gotoTable[69][NodeType::Parameters] = 82;
		m_gotoTable[69][NodeType::Identifier] = 83;
		m_gotoTable[76][NodeType::TermOp] = 52;
		m_gotoTable[79][NodeType::ArgRecurse] = 88;
		m_gotoTable[83][NodeType::ParamRecurse] = 91;
		m_gotoTable[84][NodeType::Block] = 93;
		m_gotoTable[84][NodeType::Factor] = 8;
		m_gotoTable[84][NodeType::Identifier] = 7;
		m_gotoTable[84][NodeType::WhileStatement] = 16;
		m_gotoTable[84][NodeType::Term] = 17;
		m_gotoTable[84][NodeType::Literal] = 21;
		m_gotoTable[84][NodeType::Grouping] = 20;
		m_gotoTable[84][NodeType::Primary] = 22;
		m_gotoTable[84][NodeType::UnaryOp] = 24;
		m_gotoTable[84][NodeType::Call] = 25;
		m_gotoTable[84][NodeType::Unary] = 26;
		m_gotoTable[84][NodeType::Conditional] = 27;
		m_gotoTable[84][NodeType::Logical] = 28;
		m_gotoTable[84][NodeType::Expression] = 29;
		m_gotoTable[84][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[84][NodeType::ReturnStatement] = 31;
		m_gotoTable[84][NodeType::Statement] = 33;
		m_gotoTable[84][NodeType::IfStatement] = 34;
		m_gotoTable[84][NodeType::ElseIfStatement] = 35;
		m_gotoTable[84][NodeType::ElseStatement] = 36;
		m_gotoTable[84][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[85][NodeType::Block] = 94;
		m_gotoTable[85][NodeType::Factor] = 8;
		m_gotoTable[85][NodeType::Identifier] = 7;
		m_gotoTable[85][NodeType::WhileStatement] = 16;
		m_gotoTable[85][NodeType::Term] = 17;
		m_gotoTable[85][NodeType::Literal] = 21;
		m_gotoTable[85][NodeType::Grouping] = 20;
		m_gotoTable[85][NodeType::Primary] = 22;
		m_gotoTable[85][NodeType::UnaryOp] = 24;
		m_gotoTable[85][NodeType::Call] = 25;
		m_gotoTable[85][NodeType::Unary] = 26;
		m_gotoTable[85][NodeType::Conditional] = 27;
		m_gotoTable[85][NodeType::Logical] = 28;
		m_gotoTable[85][NodeType::Expression] = 29;
		m_gotoTable[85][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[85][NodeType::ReturnStatement] = 31;
		m_gotoTable[85][NodeType::Statement] = 33;
		m_gotoTable[85][NodeType::IfStatement] = 34;
		m_gotoTable[85][NodeType::ElseIfStatement] = 35;
		m_gotoTable[85][NodeType::ElseStatement] = 36;
		m_gotoTable[85][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[86][NodeType::Block] = 95;
		m_gotoTable[86][NodeType::Factor] = 8;
		m_gotoTable[86][NodeType::Identifier] = 7;
		m_gotoTable[86][NodeType::WhileStatement] = 16;
		m_gotoTable[86][NodeType::Term] = 17;
		m_gotoTable[86][NodeType::Literal] = 21;
		m_gotoTable[86][NodeType::Grouping] = 20;
		m_gotoTable[86][NodeType::Primary] = 22;
		m_gotoTable[86][NodeType::UnaryOp] = 24;
		m_gotoTable[86][NodeType::Call] = 25;
		m_gotoTable[86][NodeType::Unary] = 26;
		m_gotoTable[86][NodeType::Conditional] = 27;
		m_gotoTable[86][NodeType::Logical] = 28;
		m_gotoTable[86][NodeType::Expression] = 29;
		m_gotoTable[86][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[86][NodeType::ReturnStatement] = 31;
		m_gotoTable[86][NodeType::Statement] = 33;
		m_gotoTable[86][NodeType::IfStatement] = 34;
		m_gotoTable[86][NodeType::ElseIfStatement] = 35;
		m_gotoTable[86][NodeType::ElseStatement] = 36;
		m_gotoTable[86][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[89][NodeType::Expression] = 96;
		m_gotoTable[89][NodeType::UnaryOp] = 24;
		m_gotoTable[89][NodeType::Term] = 17;
		m_gotoTable[89][NodeType::Identifier] = 41;
		m_gotoTable[89][NodeType::Literal] = 21;
		m_gotoTable[89][NodeType::Grouping] = 20;
		m_gotoTable[89][NodeType::Call] = 25;
		m_gotoTable[89][NodeType::Primary] = 22;
		m_gotoTable[89][NodeType::Unary] = 26;
		m_gotoTable[89][NodeType::Factor] = 8;
		m_gotoTable[89][NodeType::Conditional] = 27;
		m_gotoTable[89][NodeType::Logical] = 28;
		m_gotoTable[90][NodeType::Block] = 97;
		m_gotoTable[90][NodeType::Factor] = 8;
		m_gotoTable[90][NodeType::Identifier] = 7;
		m_gotoTable[90][NodeType::WhileStatement] = 16;
		m_gotoTable[90][NodeType::Term] = 17;
		m_gotoTable[90][NodeType::Literal] = 21;
		m_gotoTable[90][NodeType::Grouping] = 20;
		m_gotoTable[90][NodeType::Primary] = 22;
		m_gotoTable[90][NodeType::UnaryOp] = 24;
		m_gotoTable[90][NodeType::Call] = 25;
		m_gotoTable[90][NodeType::Unary] = 26;
		m_gotoTable[90][NodeType::Conditional] = 27;
		m_gotoTable[90][NodeType::Logical] = 28;
		m_gotoTable[90][NodeType::Expression] = 29;
		m_gotoTable[90][NodeType::VarDeclareStatement] = 30;
		m_gotoTable[90][NodeType::ReturnStatement] = 31;
		m_gotoTable[90][NodeType::Statement] = 33;
		m_gotoTable[90][NodeType::IfStatement] = 34;
		m_gotoTable[90][NodeType::ElseIfStatement] = 35;
		m_gotoTable[90][NodeType::ElseStatement] = 36;
		m_gotoTable[90][NodeType::FunctionDeclareStatement] = 37;
		m_gotoTable[98][NodeType::ParamRecurse] = 100;
		m_grammar[0] = { NodeType::File, 1, 1, false };
		m_grammar[1] = { NodeType::Statements, 2, 2, false };
		m_grammar[2] = { NodeType::Statements, 1, 1, false };
		m_grammar[3] = { NodeType::Block, 3, 1, false };
		m_grammar[4] = { NodeType::Block, 2, 1, false };
		m_grammar[5] = { NodeType::Block, 1, 1, false };
		m_grammar[6] = { NodeType::Block, 1, 1, false };
		m_grammar[7] = { NodeType::Block, 1, 1, false };
		m_grammar[8] = { NodeType::Block, 1, 1, false };
		m_grammar[9] = { NodeType::Block, 1, 1, false };
		m_grammar[10] = { NodeType::Statement, 1, 1, false };
		m_grammar[11] = { NodeType::Statement, 1, 1, false };
		m_grammar[12] = { NodeType::Statement, 1, 1, false };
		m_grammar[13] = { NodeType::FunctionDeclareStatement, 6, 3, false };
		m_grammar[14] = { NodeType::Parameters, 0, 0, true };
		m_grammar[15] = { NodeType::Parameters, 2, 2, false };
		m_grammar[16] = { NodeType::ParamRecurse, 0, 0, true };
		m_grammar[17] = { NodeType::ParamRecurse, 3, 2, false };
		m_grammar[18] = { NodeType::ReturnStatement, 1, 0, true };
		m_grammar[19] = { NodeType::ReturnStatement, 2, 1, false };
		m_grammar[20] = { NodeType::VarDeclareStatement, 3, 2, false };
		m_grammar[21] = { NodeType::WhileStatement, 5, 2, false };
		m_grammar[22] = { NodeType::IfStatement, 5, 2, false };
		m_grammar[23] = { NodeType::ElseIfStatement, 5, 2, false };
		m_grammar[24] = { NodeType::ElseStatement, 2, 1, false };
		m_grammar[25] = { NodeType::Expression, 1, 1, false };
		m_grammar[26] = { NodeType::Logical, 3, 3, false };
		m_grammar[27] = { NodeType::Logical, 1, 1, false };
		m_grammar[28] = { NodeType::LogicalOp, 1, 0, true };
		m_grammar[29] = { NodeType::LogicalOp, 1, 0, true };
		m_grammar[30] = { NodeType::Conditional, 3, 3, false };
		m_grammar[31] = { NodeType::Conditional, 1, 1, false };
		m_grammar[32] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[33] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[34] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[35] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[36] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[37] = { NodeType::ConditionalOp, 1, 0, true };
		m_grammar[38] = { NodeType::Term, 3, 3, false };
		m_grammar[39] = { NodeType::Term, 1, 1, false };
		m_grammar[40] = { NodeType::TermOp, 1, 0, true };
		m_grammar[41] = { NodeType::TermOp, 1, 0, true };
		m_grammar[42] = { NodeType::Factor, 3, 3, false };
		m_grammar[43] = { NodeType::Factor, 1, 1, false };
		m_grammar[44] = { NodeType::FactorOp, 1, 0, true };
		m_grammar[45] = { NodeType::FactorOp, 1, 0, true };
		m_grammar[46] = { NodeType::Unary, 2, 2, false };
		m_grammar[47] = { NodeType::Unary, 1, 1, false };
		m_grammar[48] = { NodeType::UnaryOp, 1, 0, true };
		m_grammar[49] = { NodeType::UnaryOp, 1, 0, true };
		m_grammar[50] = { NodeType::Call, 4, 2, false };
		m_grammar[51] = { NodeType::Call, 1, 1, false };
		m_grammar[52] = { NodeType::Arguments, 0, 0, true };
		m_grammar[53] = { NodeType::Arguments, 2, 2, false };
		m_grammar[54] = { NodeType::ArgRecurse, 0, 0, true };
		m_grammar[55] = { NodeType::ArgRecurse, 3, 2, false };
		m_grammar[56] = { NodeType::Primary, 1, 1, false };
		m_grammar[57] = { NodeType::Primary, 1, 1, false };
		m_grammar[58] = { NodeType::Primary, 1, 1, false };
		m_grammar[59] = { NodeType::Grouping, 3, 1, false };
		m_grammar[60] = { NodeType::Literal, 1, 0, true };
		m_grammar[61] = { NodeType::Literal, 1, 0, true };
		m_grammar[62] = { NodeType::Literal, 1, 0, true };
		m_grammar[63] = { NodeType::Identifier, 1, 0, true };
		m_grammar[64] = { NodeType::Literal, 1, 0, true };
	}
	Node parse(std::vector<Token> tokens)
	{
		std::queue<Token, std::deque<Token>> input(std::deque<Token>(tokens.begin(), tokens.end()));
		std::stack<int> stack;
		stack.push(0);
		std::stack<Node> output;
		Token beforeToken = input.front();
		int state = 0;
		while (true)
		{
			state = stack.top();
			Token& current = input.front();
			Action& nextAction = m_actionTable[state][current.type];
			if (nextAction.type == ActionType::None)
			{
				if (current.type == TokenType::_EOF)
					std::cout << "Unexpected end of file at line " << current.line << " at pos " << current.pos << std::endl;
				else
					std::cout << "Error parsing line " << current.line << " at pos " << current.pos << std::endl;
				exit(-2);
			}
			else if (nextAction.type == ActionType::Shift)
			{
				beforeToken = input.front();
				input.pop();
				stack.push(nextAction.value);
			}
			else if (nextAction.type == ActionType::Reduce)
			{
				// Push the rule to the stack
				Production production = m_grammar[nextAction.value - 1];
				for (int i = 0; i < production.rhs; i++)
					stack.pop();
				stack.push(m_gotoTable[stack.top()][production.lhs]);
				Node node;
				node.terminal = production.terminates;
				node.type = production.lhs;
				if (production.terminates)
					node.token = beforeToken;
				else
				{
					for (int i = 0; i < production.rhsNodes; i++)
					{
						node.children.push_back(output.top());
						output.pop();
					}
				}
				output.push(node);
			}
			else if (nextAction.type == ActionType::Accept)
			{
				break;
			}
		}
		Node root = output.top();
		std::stack<Node*> toReverse({ &root });
		while (!toReverse.empty())
		{
			Node* node = toReverse.top();
			toReverse.pop();
			for (Node& child : node->children)
				toReverse.push(&child);
			std::reverse(node->children.begin(), node->children.end());
		}
		return root;
	}
private:
	Production m_grammar[GRAMMAR_NUM];
	std::unordered_map<TokenType, Action> m_actionTable[SET_NUM];
	std::unordered_map<NodeType, int> m_gotoTable[SET_NUM];
};
